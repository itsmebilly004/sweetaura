-- ============================================================================
--          SAFE & IDEMPOTENT SCRIPT FOR ORDERS SETUP
-- You can run this script multiple times without causing errors.
-- ============================================================================

-- STEP 1: CREATE A BUCKET FOR PAYMENT PROOFS
INSERT INTO storage.buckets (id, name, public)
VALUES ('payment-proofs', 'payment-proofs', true)
ON CONFLICT (id) DO NOTHING;

-- Policies for payment-proofs bucket
-- DROP policies if they exist to prevent errors on re-run
DROP POLICY IF EXISTS "Public read access for payment proofs" ON storage.objects;
DROP POLICY IF EXISTS "Users can upload their own payment proof" ON storage.objects;

-- CREATE policies
CREATE POLICY "Public read access for payment proofs"
ON storage.objects FOR SELECT USING ( bucket_id = 'payment-proofs' );

CREATE POLICY "Users can upload their own payment proof"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK ( bucket_id = 'payment-proofs' AND auth.uid() = (storage.foldername(name))[1]::uuid );


-- STEP 2: CREATE ORDERS TABLE
CREATE TABLE IF NOT EXISTS public.orders (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL, -- Nullable for guest checkouts
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    status TEXT NOT NULL DEFAULT 'pending', -- e.g., pending, confirmed, shipped, delivered
    customer_name TEXT NOT NULL,
    customer_phone TEXT NOT NULL,
    delivery_address TEXT NOT NULL,
    subtotal NUMERIC(10, 2) NOT NULL,
    delivery_fee NUMERIC(10, 2) NOT NULL,
    total_amount NUMERIC(10, 2) NOT NULL,
    payment_proof_url TEXT
);
COMMENT ON TABLE public.orders IS 'Stores customer order information.';

-- STEP 3: CREATE ORDER_ITEMS TABLE
CREATE TABLE IF NOT EXISTS public.order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES public.products(id) ON DELETE RESTRICT,
    quantity INTEGER NOT NULL,
    price NUMERIC(10, 2) NOT NULL -- Price at the time of purchase
);
COMMENT ON TABLE public.order_items IS 'Stores individual items within an order.';


-- STEP 4: ENABLE RLS on new tables
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

-- STEP 5: CREATE RLS POLICIES
-- Orders
DROP POLICY IF EXISTS "Admins can manage all orders" ON public.orders;
CREATE POLICY "Admins can manage all orders"
ON public.orders FOR ALL
USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');

DROP POLICY IF EXISTS "Users can view their own orders" ON public.orders;
CREATE POLICY "Users can view their own orders"
ON public.orders FOR SELECT
USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create their own orders" ON public.orders;
CREATE POLICY "Users can create their own orders"
ON public.orders FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Order Items (inherits access from the parent order)
DROP POLICY IF EXISTS "Admins can manage all order items" ON public.order_items;
CREATE POLICY "Admins can manage all order items"
ON public.order_items FOR ALL
USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');

DROP POLICY IF EXISTS "Users can view their own order items" ON public.order_items;
CREATE POLICY "Users can view their own order items"
ON public.order_items FOR SELECT
USING (
  (SELECT auth.uid()) = (SELECT user_id FROM public.orders WHERE id = order_id)
);